rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function isValidDocument() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.*') ||
             request.resource.contentType.matches('text/.*');
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && isValidImage();
    }
    
    // User uploaded briefs
    match /users/{userId}/briefs/{fileName} {
      allow read, write: if isOwner(userId) && isValidDocument();
    }
    
    // Presentation assets
    match /presentations/{presentationId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (isValidImage() || isValidDocument()) &&
        request.resource.size < 50 * 1024 * 1024; // 50MB limit
    }
    
    // Exported presentations
    match /exports/{userId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && request.resource.size < 100 * 1024 * 1024; // 100MB limit
    }
    
    // Influencer profile images (admin upload only)
    match /influencers/{influencerId}/{fileName} {
      allow read: if true; // Public read
      allow write: if false; // Admin only via backend
    }
    
    // Template assets (public read)
    match /templates/{templateId}/{fileName} {
      allow read: if true;
      allow write: if false; // Admin only
    }
    
    // Temporary uploads (24-hour expiry handled by Cloud Functions)
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId) && request.resource.size < 50 * 1024 * 1024;
    }
  }
}
