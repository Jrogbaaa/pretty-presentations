import { initializeApp, getApps, getApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";
import { getVertexAI, getGenerativeModel } from "@firebase/vertexai-preview";

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};

// Initialize Firebase
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();

// Initialize services
let analytics: ReturnType<typeof getAnalytics> | null = null;
if (typeof window !== "undefined") {
  analytics = getAnalytics(app);
}

const db = getFirestore(app);
const storage = getStorage(app);

// Initialize Vertex AI with location configuration
const vertexAI = getVertexAI(app, {
  location: process.env.NEXT_PUBLIC_VERTEX_AI_LOCATION || "us-central1",
});

// Text generation model (for briefs, content, matching)
const model = getGenerativeModel(vertexAI, {
  model: process.env.NEXT_PUBLIC_VERTEX_AI_MODEL || "gemini-1.5-flash",
});

// Image generation model (for backgrounds, graphics, editing)
const imageModel = getGenerativeModel(vertexAI, {
  model: process.env.NEXT_PUBLIC_VERTEX_AI_IMAGE_MODEL || "gemini-2.0-flash-exp",
});

export { app, analytics, db, storage, vertexAI, model, imageModel };
